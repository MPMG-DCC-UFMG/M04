{
  "spark_fractal": [
    {
      "name": "spark.master",
      "value": "local[*]"
    },
    {
      "name": "spark.driver.host",
      "value": "10.21.0.127"
    },
    {
      "name": "spark.driver.memory",
      "value": "200g"
    },
    {
      "name": "spark.executor.cores",
      "value": "5"
    },
    {
      "name": "spark.executor.instances",
      "value": "4"
    },
    {
      "name": "spark.executor.memory",
      "value": "20g"
    }
  ],
  "spark_database": [
    {
      "name": "spark.master",
      "value": "yarn"
    },
    {
      "name": "spark.driver.host",
      "value": "10.21.0.127"
    },
    {
      "name": "spark.driver.memory",
      "value": "6g"
    },
    {
      "name": "spark.executor.memory",
      "value": "6g"
    },
    {
      "name": "spark.hadoop.hive.llap.daemon.service.hosts",
      "value": "@llap0"
    },
    {
      "name": "spark.sql.hive.hiveserver2.jdbc.url",
      "value": "jdbc:hive2://hadoopmn-gsi-prod01.mpmg.mp.br:2181,hadoopmn-gsi-prod02.mpmg.mp.br:2181,hadoopmn-gsi-prod03.mpmg.mp.br:2181/dataset;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2;AuthMech=3;password=UFMGtrilhas2020;user=trilhasgsi"
    },
    {
      "name": "spark.datasource.hive.warehouse.exec.results.max",
      "value": "2147483647"
    }
  ],
  "app": {
    "name": "read_database",
    "query": "select distinct concat('cnpj_',A.num_documento) no1, concat('end_',B.endereco_completo) no2,'endereco' tipo_aresta from postgres_olap_lins.dim_licitacao_habilitado A inner join dataset.rfb_cnpj_201905 B on A.num_documento = B.cnpj union all (select distinct concat('cnpj_',cnpj) no1, concat('tel_',ddd_telefone) no2,'telefone' tipo_aresta from (select distinct cnpj, regexp_replace(ddd_telefone, '(^0+(.*?))|([^0-9]+)', '') ddd_telefone from (select B.cnpj, B.ddd_telefone_1, B.ddd_telefone_2 from postgres_olap_lins.dim_licitacao_habilitado A left join dataset.rfb_cnpj_201905 B on A.num_documento = B.cnpj) as rfb lateral view explode(array(translate(ddd_telefone_1, ' ', ''), translate(ddd_telefone_2, ' ', ''))) rfb as ddd_telefone) A where length(ddd_telefone) between 9 and 11 and not (ddd_telefone regexp '0{7,11}|1{7,11}|2{7,11}|3{7,11}|4{7,11}|5{7,11}|6{7,11}|7{7,11}|8{7,11}|9{7,11}')) union all (select distinct concat('cnpj_',A.num_documento) no1, case when LENGTH(B.cpf_cnpj_socio) == 11 then concat('cpf_',B.cpf_cnpj_socio) else  concat('cnpj_',B.cpf_cnpj_socio) end no2,case when LENGTH(B.cpf_cnpj_socio) == 11 then 'sociedade_cnpj_cpf' else 'sociedade_cnpj_cnpj' end tipo_aresta from postgres_olap_lins.dim_licitacao_habilitado A inner join dataset.rfb_cnpj_201905_socios B on A.num_documento = B.cnpj)", 
    "output_path": "hdfs://hadoopgsiha/dados-fractal/output-read-database-caminhos-end-cnpj-tel.csv",
    "delimiter":","
  }
}
